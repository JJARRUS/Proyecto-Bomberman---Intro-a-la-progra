import random

# Diccionario de matrices por nivel con menos bloques
niveles = {
    1: [
        ["I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", "D", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", " ", " ", " ", " ", "I", " ", "I"],
        ["I", "D", " ", " ", " ", " ", " ", " ", " ", " ", " ", "D", "I"],
        ["I", " ", "I", " ", "I", " ", " ", " ", "I", " ", "I", " ", "I"],
        ["I", " ", " ", "D", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", "I", " ", "I", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", "I", " ", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", "I", " ", " ", " ", "I", " ", "I", " ", "I"],
        ["I", " ", " ", " ", "D", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I"],
    ],

    2: [
        ["I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I"],
        ["I", " ", " ", " ", "D", " ", " ", " ", "D", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", " ", " ", " ", " ", "I", " ", "I"],
        ["I", "D", " ", " ", " ", " ", " ", " ", " ", " ", " ", "D", "I"],
        ["I", " ", "I", " ", "I", " ", " ", " ", "I", " ", "I", " ", "I"],
        ["I", " ", " ", "D", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", " ", " ", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", "I", " ", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", "I", " ", " ", " ", "I", " ", "I", " ", "I"],
        ["I", " ", " ", " ", "D", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I"],
    ],

    3: [
        ["I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", "D", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", " ", " ", " ", " ", "I", " ", "I"],
        ["I", "D", " ", " ", " ", " ", " ", " ", " ", " ", " ", "D", "I"],
        ["I", " ", "I", " ", "I", " ", " ", " ", "I", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", "I", " ", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", "I", " ", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", "I", " ", " ", " ", "I", " ", "I", " ", "I"],
        ["I", " ", " ", " ", "D", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I"],
    ],

    4: [
        ["I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", " ", " ", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", "I", " ", " ", " ", "I", " ", "I", " ", "I"],
        ["I", " ", " ", " ", "D", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", "I", " ", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", " ", " ", "I", " ", " ", " ", "I", " ", "I"],
        ["I", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", " ", "I", " ", "I", " ", " ", " ", "I", " ", "I", " ", "I"],
        ["I", " ", " ", " ", "D", " ", " ", " ", " ", " ", " ", " ", "I"],
        ["I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I"],
    ]
}

def obtener_matriz_y_posiciones(nivel):
    if nivel not in niveles:
        raise ValueError(f"Nivel {nivel} no definido.")

    matriz = [fila.copy() for fila in niveles[nivel]]
    destructibles = []
    espacios_libres = []

    for fila in range(len(matriz)):
        for col in range(len(matriz[0])):
            if matriz[fila][col] == 'D':
                destructibles.append((fila, col))
            elif matriz[fila][col] == ' ':
                espacios_libres.append((fila, col))

    if not destructibles or not espacios_libres:
        raise ValueError("No hay suficientes espacios para llave y puerta.")

    fila_llave, col_llave = random.choice(destructibles)
    fila_puerta, col_puerta = random.choice(espacios_libres)

    llave_pos = (col_llave * 32, fila_llave * 32)
    puerta_pos = (col_puerta * 32, fila_puerta * 32)

    return matriz, llave_pos, puerta_pos, (fila_llave, col_llave)
